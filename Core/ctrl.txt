//ImmSrc(00) = imm3 ADDS/SUBS (imm)
//ImmSrc(01) = imm5 STR/LDR
//ImmSrc(10) = imm7 ADD/SUB
//ImmSrc(11) = imm8 MOVS

//ALUFlags(N,Z,C,V)

//ALUSrc(0) = use reg data
//ALUSrc(1) = use EX(imm)

//ALUOp(000) = ADD
//ALUOp(001) = SUB
//ALUOp(010) = AND
//ALUOp(011) = OR
//ALUOp(100) = XOR
//ALUOp(101) = NOT

//Reg1Loc(0) = Stack Pointer
//Reg1Loc(1) = other

//Reg2Loc(00) = ADDS/SUBS (reg)
//Reg2Loc(01) = CMP
//Reg2Loc(10) = AND/EOR/ORR/MVNS
//Reg2Loc(11) = MOV

//Reg3Loc(00) = other
//Reg3Loc(01) = SP
//Reg3Loc(10) = MOVS

//brSel(00) = BL
//brSel(01) = B(conditional true)
//brSel(10) = B(imm unconditional)
//brSel(11) = No branch (conditional false) / NOOP

//brEx(0) = Normal B / PC+4
//brEx(1) = BX

//ShiftDir(0) = Left
//ShiftDir(1) = Right

//CalcSrc(00) = shift
//CalcSrc(01) = alu
//CalcSrc(10) = mov (both)

//MemToReg(1) = Use DMEM
//MemToReg(0) = Use computed (alu) dat