0100000011_110_111    // LSRS R7, R6
11100_00000011111    // B 31
1011_1111_0000_0000    // NOOP
0100001100_001_111    // ORRS R7, R1
0100000011_011_111    // LSRS R7, R3
00100_010_10000101    // MOVS R2, #133
00100_000_00011000    // MOVS R0, #24
0100000010_100_001    // LSLS R1, R4
0100000011_101_001    // LSRS R1, R5
01100_01000_000_011    // STR R3, [R0, #8]
0100001010_111_111    // CMP R7, R7
0100000011_101_010    // LSRS R2, R5
101100000_0101100    // ADD SP, SP, #44
0100000011_000_010    // LSRS R2, R0
0100000011_101_101    // LSRS R5, R5
0100000010_101_011    // LSLS R3, R5
0100000111_111_011    // RORS R3, R7
010001100_0001_111    // MOV R7, R1
0100000100_011_110    // ASRS R6, R3
101100001_0000000    // SUB SP, SP, #0
0100000111_010_111    // RORS R7, R2
0100000111_100_111    // RORS R7, R4
01100_10000_000_000    // STR R0, [R0, #16]
0100001111_100_011    // MVNS R3, R4
0001110_110_000_111    // ADDS R7, R0, #6
01101_00000_000_011    // LDR R3, [R0, #0]
0100000011_010_011    // LSRS R3, R2
101100001_0100100    // SUB SP, SP, #36
0001101_110_010_101    // SUBS R5, R2, R6
0100000000_110_110    // ANDS R6, R6
0100000010_111_011    // LSLS R3, R7
0100001100_011_010    // ORRS R2, R3
0100000100_100_100    //31 ASRS R4, R4
0001110_101_011_111    // ADDS R7, R3, #5
0100001111_100_100    // MVNS R4, R4
010001100_0001_110    // MOV R6, R1
11100_00000010000    // B 16
1011_1111_0000_0000    // NOOP
0100001100_001_101    // ORRS R5, R1
0100001010_100_000    // CMP R0, R4
0100000000_011_110    // ANDS R6, R3
00100_001_01110111    // MOVS R1, #119
0100001100_101_100    // ORRS R4, R5
010001100_0101_100    // MOV R4, R5
00100_011_00110111    // MOVS R3, #55
101100001_1101100    // SUB SP, SP, #108
0100001111_100_111    // MVNS R7, R4
0100000000_101_011    // ANDS R3, R5
101100000_1010000    // ADD SP, SP, #80
0100000010_111_011    // LSLS R3, R7
0100001100_100_010    // ORRS R2, R4
010001100_0110_011    // MOV R3, R6
0100000100_000_011    //16 ASRS R3, R0
0100001111_011_011    // MVNS R3, R3
0100000000_011_000    // ANDS R0, R3
101100001_0011000    // SUB SP, SP, #24
0001110_110_100_011    // ADDS R3, R4, #6
0100000100_001_000    // ASRS R0, R1
0001100_001_100_000    // ADDS R0, R4, R1
0100000100_110_100    // ASRS R4, R6
0100000010_101_111    // LSLS R7, R5
01100_10100_000_100    // STR R4, [R0, #20]
010001100_0111_110    // MOV R6, R7
010001100_1100_000    // MOV R0, R12
11100_00000000000     // B stop


////// iarm didnt write to data on line 62

//IARM
Register content:
0 = 0
1 = 0
2 = 0
3 = 5
4 = 65535
5 = 0
6 = 5
7 = 5
8 = 0
9 = 0
10 = 0
11 = 0
12 = 0
13 = 65512
14 = 0
15 = 64
Memory content:

//SV ARM
Register content:
0 = 0
1 = 0
2 = 0
3 = 5
4 = 65535
5 = 0
6 = 5
7 = 5
8 = 0
9 = 0
10 = 0
11 = 0
12 = 0
13 = 65512
14 = 0
15 = 64
Memory content:
mem[19] = 65535


