// Test of MUL, LSL, and LSR instructions.
// Requires:
// MUL, LSL, LSR, ADDI & B instructions
// Expected results (HEX):
// X0 = 0xBAD
// X1 = 0xBAD000
// X2 = 0xBAD00
// X3 = 0xBAD
// X4 = 0x8852E9

//ADDI: I-type, Reg[Rd] = Reg[Rn] + {'0, Imm12}
//OP         Imm12        Rn    Rd
//3322222222 221111111111 00000 00000
//1098765432 109876543210 98765 43210
//1001000100 Unsigned     0..31 0..31

//B: B-type, PC = PC + SignExtend({Imm26, 2'b00})
//OP     Imm26
//332222 22222211111111110000000000
//109876 54321098765432109876543210
//000101 2's Comp Imm26

//LSL: R-type, Reg[Rd] = Reg[Rn] << shamt
//OP          Rm    Shamt  Rn    Rd
//33222222222 21111 111111 00000 00000
//10987654321 09876 543210 98765 43210
//11010011011 00000 0...63 0..31 0..31

//LSR: R-type, Reg[Rd] = Reg[Rn] >> shamt (no sign extend)
//OP          Rm    Shamt  Rn    Rd
//33222222222 21111 111111 00000 00000
//10987654321 09876 543210 98765 43210
//11010011010 00000 0...63 0..31 0..31

//MUL: R-type, Reg[Rd] = (Reg[Rn] * Reg[Rm])[63:0]
//OP          Rm    Shamt  Rn    Rd
//33222222222 21111 111111 00000 00000
//10987654321 09876 543210 98765 43210
//10011011000 0..31 011111 0..31 0..31

            // MAIN:
1001000100_101110101101_11111_00000	// ADDI X0, X31, #2989	// Set X0 = 2989
11010011011_00000_001100_00000_00001	// LSL X1, X0, #12	// X1 = X0 << 12
11010011010_00000_000100_00001_00010	// LSR X2, X1, #4	// X2 = X1 >> 4
11010011010_00000_001000_00010_00011	// LSR X3, X2, #8	// X3 = X2 >> 8
10011011000_00000_011111_00000_00100	// MUL X4, X0, X0	// X4 = X0 * X0
000101_00000000000000000000000000	// HALT:B HALT          // (HALT = 0)
1001000100_000000000000_11111_11111	// ADDI X31, X31, #0    // NOOP

